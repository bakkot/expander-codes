class ParityCode:
  # def __init__(self, k):
    # self.k = k
  def encode(self, mess):
    return mess + [sum(x for x in mess) % 2]
  def is_codeword(self, w):
    return sum(x for x in w) % 2 == 0
  def nearest_codeword(self, w):
    return self.encode(w[:-1])

class Expander:
  def __init__(self, G, S):
    # G should be a d-regular bipartite graph with second eigenvalue \leq 2*sqrt(d-1).
    #  Its edge-vertex incidence graph, a (2, d)-regular bipartite graph, will be used as the expander.
    #  i.e., the "variables" are the edges of G, and the "constraints" are its vertices.
    # S should be a linear binary code with block length d.
    # We do not verify those properties here.
    self.G = G
    self.S = S
    self.A, self.B = G.bipartition()
    self.edge_map = { e:i for (i, e) in enumerate(G.edges(labels = False)) }

  def is_codeword(self, w):
    for v in G.vertices():
      Ev = self.G.edges_incident(v, labels = False)
      x_indices = [self.edge_map[e] for e in Ev]
      x = [w[ind] for ind in x_indices]
      if not self.S.is_codeword(x): return False
    return True

  def nearest_codeword(self, w):
    # Uses Zemor's algorithm from On Expander Codes
    todos = [self.A, self.B] # left and right todos

    if len(self.edge_map) != len(w):
      raise "Wrong length message!"

    while len(todos[0]) != 0 or len(todos[1]) != 0:
      # lens = len(todos[0]), len(todos[1])
      for i in [0, 1]:
        working, todos[i] = todos[i], set()
        for v in working:
          Ev = self.G.edges_incident(v, labels = False)
          x_indices = [self.edge_map[e] for e in Ev]
          x = [w[ind] for ind in x_indices]
          if self.S.is_codeword(x): continue
          y = self.S.nearest_codeword(x)
          for (ind, b) in zip(x_indices, y):
            w[ind] = b

          for e in Ev:
            # print(e, v, 1-i)
            todos[1-i].add(e[0] if e[0] != v else e[1])
          # print(i, todos[1-i])
          # print(w)
      # if len(todos[0]) >= lens[0] or len(todos[1]) >= lens[1]:
      #   raise "Fail: error sizes are not decreasing"
    return w


x = ParityCode()


# a random 128-vertex 5-regular graph with lamdba = 3.906354638221518:
BG = loads('x\x9cU\xd6e@\\W\x1a\xc6\xf1\xb8\x10ww\x83\x08qw\x1c\x1e \t\xc9\xc4\xc9\x04\x99\x00\x81\x00s\x06\xe2$\xed\xb6\xbb\xddl\xbd\xeb\xae\x95uw\xdfv\xa5]w\xad\xacT\xd6\xdd\xa5\xfd?\xf7t?\xf4K~\x0f\x99\xe1\xde#\xef{\x0e\xd7\rh\xca5\xb4d\n[BCwk.\x92W\x9e\xfc\x9b\xed_p}v@_v`~jx\xfa\\\xa6\xad\xa5\xb5\'\xd3\x9c\x1dt-5(\xdd\xdd\x95\xcb\x0e\xaeM\x8dHw4\xf4d\xce\xa7\xbb\xba{r\xd9!\xb5\xa9a\xe9\xc6\x86\xa6\xf6Lgsv\xe8s\x9e\xda\xd8\x90{6\xff\xff\x0b\xb9\xbc\xde\xce\xee\xb6\xa6\xf6\x8eL\xfa9\xff\x9f\x97\x1d\x96\x7f\xad>;<_\xfd\xd4_\x034P\x834XC4T\xc34\\y\x1a\xa1\x91\x1a\xa5\xd1\x1a\xa3\xb1\x1a\xa7\xf1\x9a\xa0\x89\x9a\xa4\xc9\x9a\xa2\xa9\x9a\xa6\xe9\x9a\xa1\x99\x9a\xa5\xd9\x9a\xa3\xb9\x9a\xa7\xf9Z\xa0\x85Z\xa4\xc5Z\xa2|\x15h\xa9\x96i\xb9V\xa8P+\xb5J\xab\xb5Fk\xb5N\xeb\xb5A\x1b\xb5I\x9b\xb5E[\xb5M\xdb\xb5C;\xb5K\xbbU\xa4b\x95\xa8Te*W\x85*U%\xa9Z5\xaa\xd5\x1e\xed\xd5>\xd5i\xbf\x0e(\xa5\x83:\xa4\xc3:\xa2\xa3:\xa6\xe3\xaa\xd7\t\xa5uR\rjT\x93\x9a\x95\xd1)\xb5\xa8Um:\xadvu\xe8\x8c:\xd5\xa5ne\x15\x94S\x8fzuV\xe7t^\x17tQ\x97tY}\xba\xa2\xab\x99\xfal\x9e\x17![{Sv\x046\xe0H,\xc1Q\x98\x8f\xa3q\x19\x8ea\xa9\xe6\xe2X,\xc2q^:\x1c\x8f\x93q\x02\x8e\xc4\x89,\xa8\x9f3\t\'\xe0d,\xc7)\xd8\x82SY\xeeq8\r\xf7\xe1t\x0c8\x03\x9bq&\xa6q\x16\x9b\xb2\x17gc\x13\xce\xc1E8\x17\x97\xe0<\xdc\x86\xf3\xd9\xban\\\x80\x0bq!\xfa\xf3E8\n\x17\xa3\x9f\xb7\x84\r\xf6{\xf3\xd1\xf3+\xc0\x0c.\xf5\xc6\xe32\xdc\x8e\xcb)\x83\xd5\xb8\x02\'b!^\xc4\x95x\x15WQ$\xe3q5\x9e\xc258\r\xd7b\x1e\xae\xc3-\xb8\x9eR\x1a\x8b\x1b\xb0\x117\xe2z\xdc\x84\x9bq3\n\xb7Pp\x0bp+\xfa\xf3mx\x14\xb7\xbb\x10q\x07\xe58\twb+\xeeB\xff\xfen\xbc\x84E\x14k\x0e\x8b\xd1\xdf+\xc1)X\x8a\xe7\xb1\x8cR\xf6\xfb\xcb\xf14V`;Vb\'VQ\xe8\xde\x7fa\x0fV\xe3R\xac\xc1\x15X\x8b\x85\xb8\x87v\xf0~\xedE\xcf\x7f\x1f\x1e\xc4:\xac\xc2\xfd\xd8\x85\x07h\x1a?\'\x85~\xceA<\x86\x87p\x07\x1e\xa6\xa5N\xe2\x11\x9c\x89G\xd1\xcf?F\xa3y\x1d\x8e\xe3Z\xac\xc7\x0bx\x82\xf6s\x1d\xa6\xd1\xf39\x89G\xb0\x01]\x97\x8d4\xa7\xeb\xa7\t\xfd\xdef,\xc3\x0c\x9e\xc0S\xb4n=\xb6\xe0\x15l\xc5\x9d\xd8FC\xcf\xc7\xd3\xe8\xfdk\xc7j\xec\xc0><C\xbb\xbb\xce;q#v\xa1\xe7\xd9\x8d\xae\x87,\x87\xc1!\x0c\xd8\x869\xf4|{\xd0\xe3\xeaE\xbf\xef,G\xc6Y<\x87\xae\xff\xf3X\x89\x178H\xdc\'\x17\xd1\x9f_B\x7f~\x19\xbd\xcf}\xe8\xfd\xb9\xc2q\xe3>\xb8\x8a\xae\xb7\xeb\xd0\xdf\xbb\x1e=\x8e\xe7\xa1\xfb\xe0\x06\x0e\xa5ux\xa3\x0f\'|>\xfa\xfd/@\xcf\xf7&\x8e,\xf7\xef\x0b\xd1\xcf\xb9\x86\xfe\xfcE\xe8\xfe\xb8\x99\x03\xcd}t\x0b\xee\xc6[q\r\xde\x86\xee\xbf\xdb\xd1\xfbx\x07\xc7\xde\x06\xbc\x13=\xff\xbb\xd0\xfd\xfdb\xdc\x8a/A?\xef\xa5>\x1c\xf1ex\x00_\x8e\xee\xb7Wpd\xa6\xf0\x95x\x19_\x85\xcb\xf1\xd5X\x8b\xaf\xe1@]\x85\xafE\xaf\xcf\xeb\xd0\xe3x=\xba\xbf\xdf\xc0q\xeb\xcf\xdf\x88\xee\x937\xa1\xd7\xe1\xcd\x1c\xc2\x1e\xf7[\xb0\x00\xefF\xcf\xfb\x1e\x8ef\xd7\xed\xbd\xe8>\xb9\x0f]\xb7o\xc5s\xf86\x0en?\xff\xed\xe8\x9f\xdf\x81\x9b\xf0\x9dX\x83\xefB\x8f\xeb\xdd\x1c\xef\xae\xb3\xf7\xa0\xeb\xf3\xbd\xd8\x8b\xef\xe3\xd0\xf7\xfc\xde\x8f\xee\xfb\x0f\xa0\xf7\xed\x83\\\x05\xa5\xf8!\xf4\xf7>\x8cg\xf0#\xe8\xfa\xfa(\x17\x85\x7f\xefc\xe8\xbe\xf88\xd7\x86\xeb\xf6\x13\xe8\xf1}\x92K\xc4}\xfb)\xf4\xba}\xda\x97\n~\x06]\xd7\x9f\xe5\x8a\xf1|?\x87>\x07\xeeG\xcf\xf7\x01.\x1e\x9f\x0f\x9fG\x8f\xe7\x0b\xe8\xba\xfe"\xd7\x91\xeb\xe8K\xe8\xf3\xefA\xf4{\x1eB\xd7\xd3\x97\xd1\xcf\xf9\n\x97V1~\x15\xbd\xae_C\xef\xd3\xd7\xb9\xca\\_\xdf\xc0\xc3\xf8Mt\x1d\x7f\x0b=\xafos\xd1\xed\xc2\xef\xa0\xeb\xf1\xbb\\{\x1e\xff\xf7\xd0\xfd\xf1}\xdc\x83?\xe02\xac\xc3\x1f\xa2\xfb\xfbG\xe8s\xe9\xc7\\\x91>\x87~\x82\xfe\xfd\x87\xd1\xf3|\x84\x8b\xd3\xe3~\x14\xfd\xbe\xc7\xd0\xef\xfb)\xfay?\xe3Zu\x9d\xfc\x1c]\x87\xbf@\xf7\xcf\xe3\xe8\xf3\xfa\t.\xdd\xfd\xf8$\xba\xcf\x9eB\xef\xf3/\xd1\xf3\xf8\x15W\xb2\xf7\xe1\xd7\xe8\xfb\xe77\\\xd0\xfe\xfeo\xd1\xe3\xfa\x1d\xd7\xb5\xc7\xfb{\xf4y\xf0\x07\xf4z\xfe\x11\xfd\xfe?q\x99{|\x7f\xe6Jw}\xfc\x05\xdd\x17\x7fE\x7f\xefo\xe8\xfa\xf9;\x17\xbe\x9f\xf3\x0ft?\xfd\x13}\x0e\xff\x8b?\x03|n\xfe\x9b?\x06<\xae\xff\xa0\xfb\xec\xbf\xe8u\xff\x1f\xba^\x9e\xe6O\x05\xf6%\xf4\xeb\xdf\xaf\x1f\x91\xad\n\xfd\x1d\x8b\\]a@\x8c\x14\\\x18\xe8X\xec\xb5\r\x83b\xe4\xd8\n\x83cd\xe5\xc2\x10\xc7\x127C\x18\x1a#\xef\r\xc3\x1cK=\x850<\xc6\nb^\x8c\x14t\x18\xe1X\xe6\xde\r#c\xe4\xfa\n\xa3bd\x06a\xb4cy\xf2\xb611v\x10\xc7:V\xf8h\t\xe3bd\xf6a|\x8c\x1e\xfa\x84\x18\xa9\x910\xd1\xb1\xd2\xdb\x12&\xc5\xc8\n\x87\xc9\x8eU.\x8e0\xc5Q\xc9\xd0\xa7\xc6\xc8\xd6\x85i1r\xca\x87\xe9\x8e\xd5^\xe80\xc3\xb1\xc6{\x1ef\xc6\xc8\xb5\x11f\xc5\xe8u\x98\x1d\xa3\x7fm\x8ecm2\xb2\xb91\x1e\'\xces\xdc\x93\xac\xe4|\xc7}.\x90\xb0 F\xcfm\xa1c\x9d\xaf\xa5\xb0\xc8q\xbfO\xa4\xb08F\x7faI\x8c\xd4a\xc8wL\xf9\xea\x0b\x051R\xddai\x8c^\xbee\x8e\x07\x93A.w<\xe4c:\xac\x88\xd1\xb3(t<\x9c\xac\xc3\xca\x18\xfd\x84U\x8eG\x92\x17\xaf\x8e\x91\xea\tk\x1c\x8f\xbap\xc2Z\xc7c>\xeb\xc3:\xc7\xe3\xc9\xf2\xad\x8f\x91\n\x0f\x1bb\xf4x7\xc6\xe8%\xd9\xe4X\xef\xa3\'lvL\'_\xd8\xe2x\xd2\x17m\xd8\x1a\xa3\'\xbf-FOs\xbbc\xa3;0\xecplNv~g\x8c\x9e\xd0.\xc7\x8cK?\xecvlM\xbeP\xe4\xd8\x96<\xac8F\x7f\xa1\xc4\xf1t\xb2:\xa5\x8e\xed\xee\x88P\xe6\xd8\x99\x8c\xa1\xdc\xb17i\x86\n\xc7\x0b\xc9\x8c+\x1d/\'\xc3\xa9"f\xfa\x82 ?5\xb8\xa3\xab\xab;\x17\xaa\xf9\xe1Z*\xefLoGO[\xa6\xb9%\x93\x0b5\xfe\x9f\xde\x9e\xbaPK\xe8m,|\x06\x13\xa7\x07\x17')
# its double cover, a 256-vertex 5-regular bipartite graph with lambda = 3.906354638221518:
G = BipartiteGraph(BG.adjacency_matrix())

# or: a 16-vertex 3-regular graph with lambda = 2.471387453316782
BG = loads('x\x9cU\xcf\xc9n\x830\x10\x06\xe0&a5$t\xdf\xf7M\xf4\x92\xd7\xe8a$\x0e\x958F\x08\x12\x8b\xa0\xd0\xc0\xd4\xa0\xf6\x12\xa9=U\xbcu\x7f\xa7\xed!\x17\x7fx\xf0\x8c\x7f\x7f\xf6\xa7*\xcd\xe58\x7fK\xeb\xb9\xfaE<\xafW\xee=}q\x7f\xc5\x830v\x93wY\xe4\xf3F\xce\xd8\xe8b#\xa9+\xc5f\x14{I\x996\xf2#\xa9\xeaF\xb1\x15\xc5N\x92\xa5\xd3\x85\\\xce\xd8\xde\x98\x9a\xa5\xea\xef\xfb\xff\x80\x12\xed\xb2.\xa6\x8bR&\x1bu\xc1N\xd8M\xd8\ri\x8bz\xd4\xa7\x01\x19d\x92E69\xe4\x92 \x8f|\x1a\xd2\x88\x029a\xb1>\x14}\xb3\x07\r\xe8\xc3\x00\x0e\xd1j\xc2\x11\x140\xc0 \x0bnC\x1b\xee\xc0!\xdc\xd5\xe3\xe1\x1et\xe0>\xf4\xe0\x01.\xd5\xff\x0fq\xb5\xae\x1f\xc1\x11<F\x10\x17\x9e@\x1f\x9e\xeaX\xf0\x0c\xea\xbesD\xd4\xf5\x0b\xa8\xfb/\x11X\xf7]A\x9d\xeb\x1a\xf1\xf5\xfe\x06\x8f\xd0\xfb[\xb9\xe2\xbb06\xcb\xaa\xaa\x15\xdfw\xb1xm\xcb\xa6\x90\xb3\\*~\xe8\xda\xe6\x85\x1f\xdbl\xfc\x03\xa6+y\xc9')
G = BipartiteGraph(BG.adjacency_matrix())


x = Expander(G, ParityCode())
w = x.nearest_codeword([1]*3*16)
print(w)
print(x.is_codeword(w))
print(x.is_codeword([0]*3*16))



